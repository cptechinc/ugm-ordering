{#
	var                    Description / Instance of
	-------------------------------------------------
	page                   ProcessWire\Page
	checkoutm              module Checkout
	billing                Billing
#}
$(function() {
	var customer = {{ checkoutm.get_customer_js()|json_encode()|raw }};
	var shiptos  = {{ checkoutm.get_shiptos_js()|json_encode()|raw }};
	var form = $('#checkout-form');

	$("body").on('change', 'select[name=shiptoid]', function(e) {
		var select = $(this);
		var shiptoid = select.val();
		fillout_shipto_fields(shiptoid);
	});

	$("body").on('change', 'input[name=rqstdate]', function(e) {
		var select = $(this);
		var date = select.val();
		console.log(validate_requestdate(date));
	});

/* =============================================================
	Validation Functions
============================================================= */
	jQuery.validator.addMethod("rqstdate", function(value, element) {
		return this.optional(element) || validate_requestdate(value);
	}, "Ship Date must be 7 days or more out from today");

	jQuery.validator.addMethod("ponbr", function(value, element) {
		return  validate_require_ponbr(value);
	}, "PO number is required");

	form.validate({
		errorClass: "is-invalid",
		validClass: "is-valid",
		errorPlacement: function(error, element) {
			var jq = $(element);

			if (jq.closest('.input-group').length) {
				var parent = jq.closest('.input-group');
				error.insertAfter(parent).addClass('invalid-feedback');
			} else {
				error.insertAfter(element).addClass('invalid-feedback');
			}
		},
		rules: {
			rqstdate: {rqstdate: true},
			pono: { ponbr: true },
		},
		messages: {
		},
		submitHandler: function(form) {
			form.submit();
		}
	});

	function validate_require_ponbr(ponbr) {
		var required = false;
		var input_shiptoid = form.find('input[name=shiptoid]');

		if (input_shiptoid.val()) {
			required = shiptos[input_shiptoid.val()]['require_po'];
		}
		required = customer.require_po;
		return required ? false : true;
	}
	
	function validate_requestdate(date) {
		var weekfromnow = moment().add(6, 'days');
		var momentdate = moment(date, "MM/DD/YYYY");
		return momentdate.format('x') > weekfromnow.format('x');
	}

	function fillout_shipto_fields(shiptoid) {
		var shipto = new Shipto();

		if (shiptoid in shiptos) {
			shipto = get_shiptodata(shipto, shiptoid);
			console.log('true');
		}
		form.find('input[name=sconame]').val(shipto.name);
		form.find('input[name=sname]').val(shipto.name);
		form.find('input[name=saddress]').val(shipto.address1);
		form.find('input[name=saddress2]').val(shipto.address2);
		form.find('input[name=scity]').val(shipto.city);
		form.find('select[name=sstate]').val(shipto.state);
		form.find('input[name=szip]').val(shipto.zip);
	}

	function get_shiptodata(shipto, shiptoid) {
		var shipto_data = shiptos[shiptoid];
		shipto.id = shipto_data.shiptoid;
		shipto.name     = shipto_data.name;
		shipto.address1 = shipto_data.address1;
		shipto.address2 = shipto_data.address2;
		shipto.contact  = shipto_data.contact;
		shipto.city     = shipto_data.city;
		shipto.state    = shipto_data.state;
		shipto.zip      = shipto_data.zip;
		return shipto;
	}

	function Shipto() {
		this.id       = '';
		this.name     = '';
		this.address1 = '';
		this.address2 = '';
		this.contact  = '';
		this.city     = '';
		this.state    = '';
		this.zip      = '';
	}
});
