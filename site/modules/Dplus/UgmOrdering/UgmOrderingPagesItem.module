<?php namespace ProcessWire;

use ItemMasterItemQuery, ItemMasterItem;
use WarehouseInventoryQuery, WarehouseInventory;

/**
 * class Dpages
 *
 * Installs fields, templates, pages, hooks necessary for Top Menus
 * NOTE: Also installs the basic fields, templates, to build the rest of the Application
 */
class UgmOrderingPagesItem extends PwPages implements Module {
	const FIELDS = array(
		'itemid' => array(
			'name'  => 'itemid',
			'type'  => 'text',
			'label' => 'Item ID'
		),
	);

	const TEMPLATES = array(
		'item' => array(
			'name'   => 'item',
			'fields' => array('itemid', 'summary'),
			'paginated' => false
		),
	);

	const PAGES = array();

	const TEMPLATE_ITEM = 'item';

	/**
	 * Return all Items
	 * @return ItemMasterItem[]
	 */
	public function getItems() {
		return ItemMasterItemQuery::create()->find();
	}

	/**
	 * Return all Items filtered by Items that Are Active
	 * @return ItemMasterItem[]
	 */
	public function getActiveItems() {
		$itemIDs = $this->getActiveItemids();
		$q = ItemMasterItemQuery::create();
		$q->filterByItemid($itemIDs);
		return $q->find();
	}

	/**
	 * Return item IDs that are active
	 * @return array
	 */
	public function getActiveItemids() {
		$q = WarehouseInventoryQuery::create();
		$q->select(WarehouseInventory::get_aliasproperty('itemid'));
		$q->filterByStatus(WarehouseInventory::STATUS_ACTIVE);
		return $q->find()->toArray();
	}

	/**
	 * Return All item IDs
	 * @return array
	 */
	public function getItemids() {
		$q = ItemMasterItemQuery::create();
		$q->select(ItemMasterItem::get_aliasproperty('itemid'));
		return $q->find()->toArray();
	}

	/**
	 * Update / Create Item Pages
	 * @return array
	 */
	public function updatePages() {
		$this->turn_item_pages_invisible();
		$items = $this->getActiveItems();
		$updated = array();

		foreach ($items as $item) {
			if ($this->pageExists($item)) {
				$updated[$item->itemid] = $this->updatePage($item);
			} else {
				$updated[$item->itemid] = $this->createPage($item);
			}

			if ($this->pageExists($item)) {
				$this->togglePageVisibility($item, true);
			}
		}
		return $updated;
	}

	/**
	 * Turn Visibility off for Item Pages
	 * @return void
	 */
	public function turn_item_pages_invisible() {
		$template = self::TEMPLATE_ITEM;
		$pages = $this->wire('pages')->find("template=$template");

		foreach ($pages as $p) {
			$this->togglePageVisibility($p->itemid, $visible = false);
		}
	}

	/**
	 * Creates Item Page
	 * @param  ItemMasterItem $item Item
	 * @return bool
	 */
	public function createPage(ItemMasterItem $item) {
		$m_groups = $this->wire('modules')->get('UgmOrderingPagesItemGroup');

		if (!$m_groups->group_page_exists($item->itemgroup)) {
			return false;
		}

		$parent = $m_groups->get_group_page($item->itemgroup);
		$p = new Page();
		$p->of(false);
		$p->parent  = $parent;
		$p->template = self::TEMPLATE_ITEM;
		$p->name   = $this->wire('sanitizer')->pageName($item->itemid);
		$p->itemid = $item->itemid;
		$p->title   = $item->itemid;
		$p->description1 = $item->description;

		try {
			$saved = $p->save();
		} catch (\Exception $e) {
			$items = $this->wire('session')->items;
			$items[] = $item->itemid;
			$this->wire('session')->items = $items;
			$saved = false;
		}

		if ($saved) {
			return $this->updatePage($item);
		} else {
			return $saved;
		}
	}

	/**
	 * Updates Item Page
	 * @param  ItemMasterItem $item Item
	 * @return bool
	 */
	public function updatePage(ItemMasterItem $item) {
		$m_groups = $this->wire('modules')->get('UgmOrderingPagesItemGroup');

		if (!$m_groups->group_page_exists($item->itemgroup)) {
			return false;
		}

		$parent = $m_groups->get_group_page($item->itemgroup);
		$p = $this->getPage($item);
		$p->of(false);
		$p->parent  = $parent;
		$p->name    = $this->wire('sanitizer')->pageName($item->itemid);
		$p->itemid  = $item->itemid;
		$p->title   = $item->itemid;
		$p->description1 = $item->description;
		return $p->save();
	}

	/**
	 * Sets visibility for Item Page
	 * @param  ItemMasterItem|string $item   Item | Code
	 * @param  bool                  $visible
	 * @return void
	 */
	public function togglePageVisibility($item, bool $visible) {
		$p = $this->getPage($item);
		$p->of(false);

		if ($visible) {
			$p->status(['hidden' => false, 'unpublished' => false]);
		} else {
			$p->addStatus(Page::statusHidden);
		}

		return $p->save();
	}

	/**
	 * Returns if Item Exists
	 * @param  ItemMasterItem|string $item         Item | Code
	 * @return bool
	 */
	public function pageExists($item) {
		$itemID = is_object($item) ? $item->itemid : $item;
		$exists = $this->itemidPageExists($itemID);

		if ($exists === false) {
			$itemID = $this->wire('sanitizer')->pageName($itemID);
			return $this->itemidPageExists($itemID);
		}
		return $exists;
	}

	/**
	 * Return if Item ID Page Exists
	 * @param  string $itemID Item ID
	 * @return bool
	 */
	public function itemidPageExists($itemID) {
		$template = self::TEMPLATE_ITEM;
		$p = $this->wire('pages')->get("template=$template, itemid=$itemID, include=all");
		return boolval($p->id);
	}

	/**
	 * Returns Item Page
	 * @param  ItemMasterItem|string $item         Item | Item ID
	 * @return Page
	 */
	public function getPage($item) {
		$itemID = is_object($item) ? $item->itemid : $item;
		$p = $this->getItemidPage($itemID);
		if (boolval($p->id) === false) {
			$itemID = $this->wire('sanitizer')->pageName($itemID);
			return $this->getItemidPage($itemID);
		}
		return $p;
	}

	/**
	 * Return Page(template=item) for Item ID
	 * @param  string $itemID Item ID
	 * @return Page
	 */
	public function getItemidPage($itemID) {
		$template = self::TEMPLATE_ITEM;
		return $this->wire('pages')->get("template=$template, itemid=$itemID, include=all");
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */

	public function update() {
		parent::update();
		$this->turn_item_pages_invisible();
		$this->updatePages();
	}

	public function init() {
		$template = self::TEMPLATE_ITEM;

		$this->addHookProperty("Page(template=$template)::item", function($event) {
			$p = $event->object;

			if ($p->imitem) {
				$item = $p->imitem;
			} else {
				$p->imitem = ItemMasterItemQuery::create()->filterByItemid($p->itemid)->findOneOrCreate();
				$item = $p->imitem;
			}
			$event->return = $item;
		});
	}

	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Pages Modules',
			'version' => 101,
			'summary' => 'Installs and creates Ugm Ordering Pages',
			'singular' => true,
			'autoload' => true,
			'requires' => array('PwPages'),
		);
	}
}
