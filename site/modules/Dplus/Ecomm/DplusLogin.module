<?php namespace ProcessWire;
use DateTime;
use Purl\Url;

Use Propel\Runtime\ActiveQuery\ModelCriteria;
use Propel\Runtime\ActiveQuery\Criteria;

use LoginQuery, Login;

use CustomerQuery, Customer;
use SalesOrderQuery, SalesOrder;

include_once(__DIR__.'/../DplusResponse.php');

/**
 * Handles the Login Functionality, sends Login Requests to Dplus
 */
class DplusLogin extends WireData implements Module {

/* =============================================================
	CRUD Processing Functions
============================================================= */
	/**
	 * Process Input, call function that corresponds with action
	 * @param  WireInput $input
	 * @param  User      $user
	 * @return void
	 */
	public function process_input(WireInput $input, User $user) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if ($values->action) {
			switch ($values->text('action')) {
				case 'logout':
					if ($user->isLoggedInDplus()) {
						$this->request_logout();
					}
					break;
				case 'login':
					$this->login_input($input, $user);
					break;
				case 'update-password':
					$this->update_password($input, $user);
					break;
				case 'setup-recovery':
					$this->setup_recovery($input, $user);
					break;
				case 'register-account':
					$this->register_account($input);
					break;
			}
		} else {
			$this->wire('session')->response_login = DplusResponse::create_error("No Login Action provided");
		}
	}

	/**
	 * Processes Input For Login Request
	 * @param  WireInput $input
	 * @param  User      $user
	 * @return void
	 */
	public function login_input(WireInput $input, User $user) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$response = new DplusResponse();

		if ($values->email) {
			$this->request_login($values->text('email'), $values->text('password'));

			if ($user->isLoggedInDplus()) {
				$response->set_success(true);
			} else {
				$response->set_error(true);
				$response->set_message("Invalid Email / Password");
			}
		} else {
			$response->set_error(true);
			$response->set_message("Unable to Log in");
		}
		$this->wire('session')->response_login = $response;
	}

	/**
	 * Processes Input For Update Password
	 * @param  WireInput $input
	 * @param  User      $user
	 * @return void
	 */
	public function update_password(WireInput $input, User $user) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$response = new DplusResponse();

		if ($user->isLoggedInDplus()) {
			$email = $values->text('email');
			$password = $values->text('password');
			$new = $values->text('new');
			$this->request_password_change($email, $password, $new);
			$login = $this->get_loginrecord();

			if ($login->updated_password()) {
				$response->set_success(true);
				$response->set_message("Password has been updated");
			} else {
				$response->set_error(true);
				$response->set_message("Unable to update password");
			}
		} else {
			$response->set_error(true);
			$response->set_message("User Is not Logged In");
		}
		$this->wire('session')->response_login = $response;
	}

	/**
	 * Processes Input For Setup Recovery
	 * @param  WireInput $input
	 * @param  User      $user
	 * @return void
	 */
	public function setup_recovery(WireInput $input, User $user) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$response = new DplusResponse();


		if ($user->isLoggedInDplus()) {
			$email = $values->text('email');
			$password = $values->text('password');
			$new = $values->text('new');
			$maiden = $values->text('maiden');
			$city   = $values->text('city');

			$this->request_setup_recovery($email, $password, $new, $maiden, $city);
			$login = $this->get_loginrecord();

			if ($login->updated_password()) {
				$response->set_success(true);
				$response->set_message("Password has been updated");
			} else {
				$response->set_error(true);
				$response->set_message("Unable to update password");
			}
		} else {
			$response->set_error(true);
			$response->set_message("User Is not Logged In");
		}
		$this->wire('session')->response_login = $response;
	}

	/**
	 * Processes Input For Register Account
	 * @param  WireInput $input
	 * @param  User      $user
	 * @return void
	 */
	public function register_account(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$response = new DplusResponse();

		if ($input->email && $input->password && $input->custID) {
			$this->request_register_account($input);
			$login = $this->get_loginrecord();
		} else {
			$response->set_error(true);
			$response->set_message("Unable to register account");
		}

		$this->wire('session')->response_login = $response;
	}

/* =============================================================
	Dplus Cobol Request Functions
============================================================= */
	/**
	 * Send Login Request
	 * @param  string $email    User Email
	 * @param  string $password User Password
	 * @return void
	 */
	protected function request_login($email, $password) {
		$dplusdb = $this->wire('modules')->get('DplusDatabaseDpluso')->db_name;
		$data = array("DBNAME=$dplusdb", "LOGIN=$email", "PSWD=$password");
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($this->wire('config')->cgis['default'], session_id());
	}

	/**
	 * Send Password Change Request
	 * @param  string $email    User Email
	 * @param  string $password Password
	 * @param  string $new      New Password
	 * @return void
	 */
	protected function request_password_change($email, $password, $new) {
		$dplusdb = $this->wire('modules')->get('DplusDatabaseDpluso')->db_name;
		$data = array("DBNAME=$dplusdb", 'CHANGE PASS', "EMAIL=$email", "PASS=$password", "NPASS=$new");
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($this->wire('config')->cgis['default'], session_id());
	}

	/**
	 * Send Setup Recovery Request
	 * @param  string $email    User Email
	 * @param  string $password Password
	 * @param  string $new      New Password
	 * @param  string $maiden   Mother's Maiden Name
	 * @param  string $city     City Born in
	 * @return void
	 */
	protected function request_setup_recovery($email, $password, $new, $maiden, $city) {
		$dplusdb = $this->wire('modules')->get('DplusDatabaseDpluso')->db_name;
		$data = array("DBNAME=$dplusdb", 'FIRST CHANGE PASS', "EMAIL=$email", "PASS=$password", "NPASS=$new");
		$data[] = "MMN=$maiden";
		$data[] = "CBI=$city";
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($this->wire('config')->cgis['default'], session_id());
	}

	/**
	 * Send Register Account Request
	 * @param  WireInput $input    InputData
	 * @return void
	 */
	protected function request_register_account(WireInput $input) {
		$dplusdb = $this->wire('modules')->get('DplusDatabaseDpluso')->db_name;
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;
		$ordn1 = $this->get_customer_ordernumber($values->text('custID'));
		$ordn2 = $this->get_customer_ordernumber($values->text('custID'), $ordn1);
		$data = array(
			"DBNAME=$dplusdb",
			'EXTCUST',
			'EMAIL=' . $values->text('email'),
			'PASS=' . $values->text('password'),
			'CUSTID=' . $values->text('custID'),
			"SHIPID=",
			'MMN=' . $values->text('maiden'),
			'CBI=' . $values->text('city'),
			"INV1=$ordn1",
			"INV2=$ordn2",
			'CONTACT=' . $values->text('contact')
		);

		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($this->wire('config')->cgis['default'], session_id());
	}


	/**
	 * Send Logout Request
	 * @return void
	 */
	protected function request_logout() {
		$dplusdb = $this->wire('modules')->get('DplusDatabaseDpluso')->db_name;
		$data = array("DBNAME=$dplusdb", 'LOGOUT');
		$requestor = $this->wire('modules')->get('DplusRequest');
		$requestor->write_dplusfile($data, session_id());
		$requestor->cgi_request($this->wire('config')->cgis['default'], session_id());
	}

/* =============================================================
	Supplemental Functions
============================================================= */
	/**
	 * Return Login Record for this Session
	 * @return Login
	 */
	public function get_loginrecord() {
		$q = LoginQuery::create();
		$record = $q->filterBySessionid(session_id())->findOneOrCreate();
		return $record;
	}

	/**
	 * Sets User Properties based on Login Record
	 * @param  User   $user User
	 * @return void
	 */
	public function init_user(User $user) {
		$loginrecord    = $this->get_loginrecord();
		$user->user     = $loginrecord->contact;
		$user->email    = $loginrecord->email;
		$user->custid   = $loginrecord->custid;
		$user->shiptoid = $loginrecord->shiptoid;
		$user->customer = $this->get_user_customer($user);

		$user_pw = $this->wire('users')->get("email=$user->email");

		if ($user_pw->id) {
			if ($user_pw->hasRole('items-admin')) {
				$user->addRole('items-admin');
			}
		}
	}

	/**
	 * Return User's Customer
	 * @param  User     $user
	 * @return Customer
	 */
	public function get_user_customer(User $user) {
		return CustomerQuery::create()->findOneByCustid($user->custid);
	}

	public function get_customer_ordernumber($custID, $not = '') {
		$q = SalesOrderQuery::create();
		$q->select(SalesOrder::get_aliasproperty('ordernumber'));
		$q->filterByCustid($custID);

		if ($not) {
			$q->filterByOrdernumber($not, Criteria::ALT_NOT_EQUAL);
		}
		return $q->findOne();
	}

	/**
	 * Remove Old Login Records
	 * @return void
	 */
	public function forceLogouts() {
		$datetime = $this->getDateTime();
		$q = LoginQuery::create();
		$this->filterDateTime($q, $datetime);

		if ($q->count()) {
			$q->delete();
			$this->deleteOldBilling($datetime);
		}
	}

	/**
	 * Filter Query to for older Records
	 * @param  ModelCriteria $q
	 * @param  DateTime      $datetime
	 * @return void
	 */
	private function filterDateTime(ModelCriteria $q, DateTime $datetime) {
		$model = $q->getModelName();
		$q->condition('todayDate', "$model.Date <= ?", $datetime->format('Ymd'));
		$q->condition('todayTime', "$modelTime < ?", $datetime->format('His'));
		$q->combine(['todayDate', 'todayTime'], 'and', 'today') ;

		$q->condition('yesterdayDate', "$modelDate < ?", $datetime->format('Ymd'));
		$q->condition('yesterdayTime', "$model.Time > 0");
		$q->combine(['yesterdayDate', 'yesterdayTime'], 'and', 'yesterday') ;

		$conditions = ['today', 'yesterday'];
		$q->where($conditions, 'or');
	}

	/**
	 * Remove Old Billing Records
	 * @param  DateTime $datetime
	 * @return void
	 */
	private function deleteOldBilling(DateTime $datetime = null) {
		$datetime = $datetime ? $datetime : $this->getDateTime();
		$q = $this->wire('modules')->get('Checkout')->query();
		$this->filterDateTime($q, $datetime);
		if ($q->count()) {
			$q->delete();
		}
	}

	/**
	 * Return DateTime
	 * @param  string $modifier modifier for Date Time e.g. -5 minutes
	 * @return DateTime
	 */
	private function getDateTime($modifier = '') {
		$modifier = $modifier ? $modifier : '-30 minutes';
		$datetime = new DateTime();
		$datetime->modify($modifier);
		return $datetime;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Ecomm Login Module',
			'version' => 101,
			'summary' => 'Handles Logging into Dplus Ecomm',
			'singular' => true,
			'autoload' => true,
		);
	}

	public function init() {
		$this->addHook('User::isLoggedInDplus', function($event) {
			$user = $event->object;
			$loginrecord = $this->get_loginrecord();
			$event->return = $loginrecord->is_loggedin();
		});

		$this->addHook('User::needs_setup_recovery', function($event) {
			$user = $event->object;
			$loginrecord = $this->get_loginrecord();
			$event->return = $loginrecord->needs_setup_recovery();
		});

		$this->addHook('User::setup', function($event) {
			$user = $event->object;
			$this->init_user($user);
		});
	}
}
